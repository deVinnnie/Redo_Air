<?xml version="1.0" encoding="UTF-8"?>

<!--
    Due to JPA's reluctance to allow more flexible persistence.xml configurations, (which by the way is
    unspeakably lame) we are forced to duplicate the entire context for the tests, strip out the managed stuff,
    and manually list all entity classes.
    Check with teacher for details on this subject, or wait for the wonderful world of Spring.
    Alternative testing strategies (possibly in combination):
        - Use commit strategy for tests
                + Eyeball asserts!
                + Almost transparent schema updates (by using hbm2ddl.auto = create)
                - Slower
                - Need to reload Database each time (using DBUnit or other frameworks)
        - Use rollback instead of commit at end of tests
                + No need to reload database every time (using something like DBUnit)
                - No eyeball asserts
        - Use in-memory db strategy for unit tests
                + Fastest
                - Not as close to real environment
                - No eyeball asserts (in-memory data is gone after test completes)
        - Use in-container tests (such as with Arquillian)
                + Less hassle once (if ever) you figure out how to configure it
                - Tests rely on app server (maybe not a real issue if also adding functional tests such as with Selenium)
                - Slow
                - No mocking/stubbing
                - No breakpoints (!!!) (runs in separate VM)
        - Use mocks/stubs
                + Fast
                + The way of TDD
                + True unit tests (less integration)
                + Easier to run on CI servers (since it is more self-contained)
    The choice made here is:
        - Commit strategy using DBUnit and actual database (mysql).
        - Prefer mocks/stubs for non-persistence layers
        ==> Maximize true unit tests, mocks and stubs, allow eyeball assertions (manually verifying with your own eyes)
        on database.
    When you start with your project, you decide which strategy is best for your situation.
-->
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">

    <persistence-unit name="appPU" transaction-type="RESOURCE_LOCAL">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>

        <!--
            Sadly, we have to add each Entity here (only needed for the persistence.xml in src/test/java.
            This is due to the fact that JPA only scans automatically in the classpath root where its persistence.xml is
            found. Thus when loading JPA using this persistence.xml (in the unit tests), it does not 'see' the entities
            from src/main/java because they are in another source root.
            Currently haven't found an elegant way around this.
         -->
        <class>com.realdolmen.air.domain.AirlineCompany</class>
        <class>com.realdolmen.air.domain.Flight</class>
        <class>com.realdolmen.air.domain.Ticket</class>
        <class>com.realdolmen.air.domain.Airport</class>
        <class>com.realdolmen.air.domain.Region</class>
        <class>com.realdolmen.air.domain.Booking</class>
        <class>com.realdolmen.air.domain.Customer</class>
        <class>com.realdolmen.air.domain.TravelClass</class>
        <class>com.realdolmen.air.domain.payement.Payment</class>
        <class>com.realdolmen.air.domain.payement.PaymentMethod</class>
        <class>com.realdolmen.air.domain.payement.CreditCard</class>
        <class>com.realdolmen.air.domain.Employee</class>
        <class>com.realdolmen.air.domain.User</class>

        <properties>
            <!--jdbc:h2:file:C:/dev/databases/berru;MODE=Oracle-->
                        <property name="hibernate.connection.url" value="jdbc:h2:mem:appTestDatabase;MODE=Oracle"/>
                        <property name="hibernate.connection.driver_class" value="org.h2.Driver"/>
                        <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
                        <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
                        <!--<property name="hibernate.connection.username" value="sa"/>-->
                        <!--<property name="hibernate.connection.password" value=""/>-->
                        <property name="hibernate.show_sql" value="true"/>
                        <property name="hibernate.format_sql" value="true"/>
                        <property name="hibernate.connection.useUnicode" value="true"/>
                       <!--<property name="hibernate.connection.characterEncoding" value="UTF-8"/>-->
                        <property name="hibernate.id.new_generator_mappings" value="false"/>
        </properties>
    </persistence-unit>
</persistence>